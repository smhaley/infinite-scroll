{"version":3,"sources":["App.tsx","hooks.tsx","reportWebVitals.ts","index.tsx"],"names":["Nav","styled","nav","NavLogo","div","Card","Heading","FooterDiv","CardContainer","ContentContainer","section","RickContainer","GET_CHARACTERS","gql","CharacterList","loading","data","characters","results","map","val","src","image","alt","name","status","location","id","App","useState","stop","setStop","ref","useRef","entry","elementRef","threshold","root","rootMargin","freezeOnceVisible","setEntry","frozen","isIntersecting","updateEntry","useEffect","console","log","node","current","window","IntersectionObserver","observer","observe","disconnect","useIntersectionObserver","isVisible","useQuery","variables","page","fetchMore","getMore","useCallback","next","info","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","merge","existing","incoming","result","Character","read","toUpperCase","client","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a8eea535.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { useIntersectionObserver } from \"./hooks\";\n\nexport const Nav = styled.nav`\n  background: #0147fa;\n  height: 80px;\n  display: flex;\n  top: 0;\n  justify-content: space-between;\n  z-index: 10;\n  position: fixed;\n  width: 100%;\n  height: 70px;\n  box-shadow: 0 8px 10px -8px rgba(0, 0, 0, 0.3);\n`;\n\nexport const NavLogo = styled.div`\n  color: white;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding-left: 2rem;\n  height: 100%;\n  font-size: 1.5rem;\n  font-weight: 700;\n`;\n\nconst Card = styled.div`\n  margin: 20px;\n  padding: 10px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  transition: 0.3s;\n  max-width: 250px;\n  &:hover {\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n  }\n  img {\n    width: 100%;\n  }\n`;\n\nconst Heading = styled.div`\n  margin-top: 120px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 1.5rem;\n  text-align: center;\n`;\n\nexport const FooterDiv = styled.div`\n  margin-top: 1rem;\n  padding: 1rem;\n  position: relative;\n  bottom: 0;\n  left: 0;\n  height: 60px;\n  text-align: center;\n  font-size: 1.5rem;\n  font-weight: 700;\n`;\n\nconst CardContainer = styled.div`\n  padding: 2px 16px;\n  min-height: 160px;\n`;\n\ninterface CharacterVars {\n  page: number;\n}\n\nconst ContentContainer = styled.section`\n  display: flex;\n  padding: 50px;\n  flex-direction: column;\n  align-items: center;\n  min-height: 100vh;\n`;\n\nconst RickContainer = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface Info {\n  next: number;\n  pages: number;\n}\n\ninterface Location {\n  name: string;\n}\n\ninterface Result {\n  id: string;\n  name: string;\n  image: string;\n  status: string;\n  location: Location;\n}\n\ninterface Characters {\n  info: Info;\n  results: Result[];\n}\n\ninterface CharacteryData {\n  characters: Characters;\n}\n\nconst GET_CHARACTERS = gql`\n  query getChars($page: Int) {\n    characters(page: $page) {\n      info {\n        __typename\n        next\n        pages\n      }\n      results {\n        id\n        name\n        image\n        status\n        location {\n          name\n        }\n      }\n    }\n  }\n`;\n\ninterface Props {\n  loading: boolean;\n  data: CharacteryData | undefined;\n}\n\nconst CharacterList: React.FC<Props> = ({ loading, data }) => {\n  return (\n    <div>\n      {loading ? (\n        <p>Loading ...</p>\n      ) : (\n        <>\n          <RickContainer>\n            {data &&\n              data.characters.results.map((val) => (\n                <Card key={val.id + val.name + \"card\"}>\n                  <img src={val.image} alt={val.name} />\n                  <CardContainer key={val.id + val.name + \"container\"}>\n                    <h4>\n                      <b>{val.name}</b>\n                    </h4>\n                    <p>\n                      <b>Status:</b> {val.status}\n                    </p>\n                    <p>\n                      <b>Location:</b> {val.location.name}\n                    </p>\n                  </CardContainer>\n                </Card>\n              ))}\n          </RickContainer>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [stop, setStop] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n  const entry = useIntersectionObserver(ref, {});\n  const isVisible = !!entry?.isIntersecting;\n\n  const { loading, data, fetchMore } = useQuery<CharacteryData, CharacterVars>(\n    GET_CHARACTERS,\n    {\n      variables: { page: 1 },\n    }\n  );\n\n  const getMore = useCallback(() => {\n    if (data) {\n      const { next } = data.characters.info;\n      if (data && next && !loading) {\n        fetchMore({\n          variables: { page: next },\n        });\n      } else if (!next) {\n        setStop(true);\n      }\n    }\n  }, [data, loading, fetchMore]);\n\n  useEffect(() => {\n    if (isVisible) {\n      getMore();\n    }\n  }, [isVisible, getMore]);\n\n  return (\n    <>\n      <Nav>\n        <NavLogo>Slick Rick.</NavLogo>\n      </Nav>\n      <Heading>\n        Infinite Scroll using: <b>Appolo Client V3</b> &{\" \"}\n        <b>Intersection Observer</b>\n      </Heading>\n      <ContentContainer>\n        <CharacterList loading={loading} data={data} />\n      </ContentContainer>\n      {stop ? (\n        <FooterDiv>That's All!</FooterDiv>\n      ) : (\n        <FooterDiv ref={ref}>Bottom</FooterDiv>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useEffect, useState, useRef, RefObject } from \"react\";\n\ninterface Options {\n  callback: () => Promise<unknown>;\n  element: HTMLElement | null;\n}\n\nexport const useInfiniteScroll = ({ callback, element }: Options) => {\n  const [isFetching, setIsFetching] = useState(false);\n  const observer = useRef<IntersectionObserver>();\n\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    observer.current = new IntersectionObserver((entries) => {\n      if (!isFetching && entries[0].isIntersecting) {\n        setIsFetching(true);\n        callback().finally(() => setIsFetching(false));\n      }\n    });\n    observer.current.observe(element);\n\n    return () => observer.current?.disconnect();\n  }, [callback, isFetching, element]);\n\n  return isFetching;\n};\n\ninterface Args extends IntersectionObserverInit {\n  freezeOnceVisible?: boolean;\n}\n\nexport function useIntersectionObserver(\n  elementRef: RefObject<Element>,\n  {\n    threshold = 0,\n    root = null,\n    rootMargin = \"0%\",\n    freezeOnceVisible = false,\n  }: Args\n): IntersectionObserverEntry | undefined {\n  const [entry, setEntry] = useState<IntersectionObserverEntry>();\n\n  const frozen = entry?.isIntersecting && freezeOnceVisible;\n\n  const updateEntry = ([entry]: IntersectionObserverEntry[]): void => {\n    setEntry(entry);\n  };\n\n  useEffect(() => {\n      console.log('fire')\n    const node = elementRef?.current; // DOM Ref\n\n    const hasIOSupport = !!window.IntersectionObserver;\n    if (!hasIOSupport || frozen || !node) return;\n    const observerParams = { threshold, root, rootMargin };\n    const observer = new IntersectionObserver(updateEntry, observerParams);\n    observer.observe(node);\n    return () => observer.disconnect();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [elementRef, threshold, root, rootMargin, frozen]);\n\n  return entry;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        characters: {\n          // Don't cache separate results based on\n          // any of this field's arguments.\n          keyArgs: false,\n          // Concatenate the incoming list items with\n          // the existing list items.\n          merge(existing, incoming) {\n            if (!incoming) return existing;\n            if (!existing) return incoming; // existing will be empty the first time\n\n            const { results, ...rest } = incoming;\n\n            let result = rest;\n            result.results = [...existing.results, ...results]; // Merge existing items with the items from incoming\n\n            return result;\n          },\n        },\n      },\n    },\n    Character: {\n      fields: {\n        name: {\n          read(existing) {\n            return existing.toUpperCase();\n          },\n        },\n      },\n    },\n  },\n});\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\",\n  cache: cache,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
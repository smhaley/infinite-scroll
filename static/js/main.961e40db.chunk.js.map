{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","styled","div","CardContainer","Button","button","AppContainer","section","RickContainer","GET_CHARACTERS","gql","CharacterList","useQuery","variables","page","loading","data","fetchMore","characters","results","map","val","src","image","alt","name","status","location","id","type","onClick","next","info","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","cache","InMemoryCache","typePolicies","Query","fields","keyArgs","merge","existing","incoming","result","Character","read","toUpperCase","client","ApolloClient","uri","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"kSAMMA,EAAOC,IAAOC,IAAV,4PAcJC,EAAgBF,IAAOC,IAAV,wEAKbE,EAASH,IAAOI,OAAV,qSAmBNC,EAAeL,IAAOM,QAAV,mJAQZC,EAAgBP,IAAOC,IAAV,wIAiCbO,EAAiBC,YAAH,8RAoBpB,SAASC,IAEP,MAAqCC,YACnCH,EACA,CACEI,UAAW,CAAEC,KAAM,KAHfC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,KAAMC,EAAvB,EAAuBA,UAkBvB,OACE,gCACE,6CACCF,EACC,4CAEA,qCACE,cAACP,EAAD,UACGQ,GACCA,EAAKE,WAAWC,QAAQC,KAAI,SAACC,GAAD,OAC1B,eAACrB,EAAD,WACE,qBAAKsB,IAAKD,EAAIE,MAAOC,IAAKH,EAAII,OAC9B,eAACtB,EAAD,WACE,6BACE,4BAAIkB,EAAII,SAEV,8BACE,wCADF,IACkBJ,EAAIK,UAEtB,8BACE,0CADF,IACoBL,EAAIM,SAASF,UARfJ,EAAIO,GAAKP,EAAII,KAAO,eAF/BJ,EAAIO,GAAKP,EAAII,WAgB9B,cAACrB,EAAD,CAAQyB,KAAK,SAASC,QArCd,WACd,GAAId,EAAM,CACR,IAAQe,EAASf,EAAKE,WAAWc,KAAzBD,KACRE,QAAQC,IAAIH,GACZf,GACEC,EAAU,CACRJ,UAAW,CAAEC,KAAMiB,OA+BnB,4BAmBKI,MAVf,WACE,OACE,cAAC7B,EAAD,UACE,cAACE,EAAD,UACE,cAACG,EAAD,SCtJOyB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sCCHRQ,EAAQ,IAAIC,IAAc,CAC9BC,aAAc,CACZC,MAAO,CACLC,OAAQ,CACN/B,WAAY,CAGVgC,SAAS,EAGTC,MANU,SAMJC,EAAUC,GACd,IAAKA,EAAU,OAAOD,EACtB,IAAKA,EAAU,OAAOC,EAEtB,IAAQlC,EAAqBkC,EAArBlC,QAEJmC,EAFJ,YAA6BD,EAA7B,GAKA,OAFAC,EAAOnC,QAAP,sBAAqBiC,EAASjC,SAA9B,YAA0CA,IAEnCmC,MAKfC,UAAW,CACTN,OAAQ,CACNxB,KAAM,CACJ+B,KADI,SACCJ,GACH,OAAOA,EAASK,qBAQtBC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,sCACLf,MAAOA,IAGTgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1B9B,M","file":"static/js/main.961e40db.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\nimport { useQuery, gql } from \"@apollo/client\";\n// import {useInfiniteScroll, useIntersectionObserver} from './hooks'\n\nconst Card = styled.div`\n  margin: 20px;\n  padding: 10px;\n  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  transition: 0.3s;\n  max-width: 250px;\n  &:hover {\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);\n  }\n  img {\n    width: 100%;\n  }\n`;\n\nconst CardContainer = styled.div`\n  padding: 2px 16px;\n  min-height: 160px;\n`;\n\nconst Button = styled.button`\n  text-align: center;\n  background: lightblue;\n  color: blue;\n  font-size: 1.1em;\n  padding: 0.5em 0.7em;\n  border: 1px solid blue;\n  border-radius: 2px;\n  transition: 0.1s ease-in-out;\n  &:active {\n    color: lightblue;\n    background-color: blue;\n  }\n`;\n\ninterface CharacterVars {\n  page: number;\n}\n\nconst AppContainer = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n`;\n\nconst RickContainer = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n`;\n\ninterface Info {\n  next: number;\n}\n\ninterface Location {\n  name: string;\n}\n\ninterface Result {\n  id: string;\n  name: string;\n  image: string;\n  status: string;\n  location: Location;\n}\n\ninterface Characters {\n  info: Info;\n  results: Result[];\n}\n\ninterface CharacteryData {\n  characters: Characters;\n}\n\nconst GET_CHARACTERS = gql`\n  query getChars($page: Int) {\n    characters(page: $page) {\n      info {\n        __typename\n      next\n    }\n      results {\n        id\n        name\n        image\n        status\n        location {\n          name\n        }\n      }\n    }\n  }\n`;\n\nfunction CharacterList() {\n\n  const { loading, data, fetchMore } = useQuery<CharacteryData, CharacterVars>(\n    GET_CHARACTERS,\n    {\n      variables: { page: 1 },\n    }\n  );\n\n  const getMore = () => {\n    if (data) {\n      const { next } = data.characters.info;\n      console.log(next);\n      data &&\n        fetchMore({\n          variables: { page: next},\n        });\n    }\n  };\n\n  return (\n    <div>\n      <h3>Slick Rick.</h3>\n      {loading ? (\n        <p>Loading ...</p>\n      ) : (\n        <>\n          <RickContainer>\n            {data &&\n              data.characters.results.map((val) => (\n                <Card key={val.id + val.name}>\n                  <img src={val.image} alt={val.name}></img>\n                  <CardContainer key={val.id + val.name + \"container\"}>\n                    <h4>\n                      <b>{val.name}</b>\n                    </h4>\n                    <p>\n                      <b>Status:</b> {val.status}\n                    </p>\n                    <p>\n                      <b>Location:</b> {val.location.name}\n                    </p>\n                  </CardContainer>\n                </Card>\n              ))}\n          </RickContainer>\n          <Button type=\"button\" onClick={getMore}>\n            Get More\n          </Button>\n        </>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <AppContainer>\n      <RickContainer>\n        <CharacterList />\n      </RickContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        characters: {\n          // Don't cache separate results based on\n          // any of this field's arguments.\n          keyArgs: false,\n          // Concatenate the incoming list items with\n          // the existing list items.\n          merge(existing, incoming) {\n            if (!incoming) return existing;\n            if (!existing) return incoming; // existing will be empty the first time\n\n            const { results, ...rest } = incoming;\n\n            let result = rest;\n            result.results = [...existing.results, ...results]; // Merge existing items with the items from incoming\n\n            return result;\n          },\n        },\n      },\n    },\n    Character: {\n      fields: {\n        name: {\n          read(existing) {\n            return existing.toUpperCase();\n          },\n        },\n      },\n    },\n  },\n});\n\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\",\n  cache: cache,\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}